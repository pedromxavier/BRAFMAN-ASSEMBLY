Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> code
Rule 2     start -> <empty>
Rule 3     code -> code stmt
Rule 4     code -> stmt
Rule 5     stmt -> CMD args NEWLINE
Rule 6     stmt -> CMD args
Rule 7     args -> args COMMA arg
Rule 8     args -> arg
Rule 9     arg -> literal LPAR literal RPAR
Rule 10    arg -> literal
Rule 11    literal -> HEX_A
Rule 12    literal -> HEX_B
Rule 13    literal -> DEC
Rule 14    literal -> BIN_A
Rule 15    literal -> BIN_B
Rule 16    literal -> REG

Terminals, with rules where they appear

BIN_A                : 14
BIN_B                : 15
CMD                  : 5 6
COMMA                : 7
DEC                  : 13
HEX_A                : 11
HEX_B                : 12
LPAR                 : 9
NEWLINE              : 5
REG                  : 16
RPAR                 : 9
error                : 

Nonterminals, with rules where they appear

arg                  : 7 8
args                 : 5 6 7
code                 : 1 3
literal              : 9 9 10
start                : 0
stmt                 : 3 4

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . code
    (2) start -> .
    (3) code -> . code stmt
    (4) code -> . stmt
    (5) stmt -> . CMD args NEWLINE
    (6) stmt -> . CMD args

    $end            reduce using rule 2 (start -> .)
    CMD             shift and go to state 4

    start                          shift and go to state 1
    code                           shift and go to state 2
    stmt                           shift and go to state 3

state 1

    (0) S' -> start .



state 2

    (1) start -> code .
    (3) code -> code . stmt
    (5) stmt -> . CMD args NEWLINE
    (6) stmt -> . CMD args

    $end            reduce using rule 1 (start -> code .)
    CMD             shift and go to state 4

    stmt                           shift and go to state 5

state 3

    (4) code -> stmt .

    CMD             reduce using rule 4 (code -> stmt .)
    $end            reduce using rule 4 (code -> stmt .)


state 4

    (5) stmt -> CMD . args NEWLINE
    (6) stmt -> CMD . args
    (7) args -> . args COMMA arg
    (8) args -> . arg
    (9) arg -> . literal LPAR literal RPAR
    (10) arg -> . literal
    (11) literal -> . HEX_A
    (12) literal -> . HEX_B
    (13) literal -> . DEC
    (14) literal -> . BIN_A
    (15) literal -> . BIN_B
    (16) literal -> . REG

    HEX_A           shift and go to state 9
    HEX_B           shift and go to state 10
    DEC             shift and go to state 11
    BIN_A           shift and go to state 12
    BIN_B           shift and go to state 13
    REG             shift and go to state 14

    args                           shift and go to state 6
    arg                            shift and go to state 7
    literal                        shift and go to state 8

state 5

    (3) code -> code stmt .

    CMD             reduce using rule 3 (code -> code stmt .)
    $end            reduce using rule 3 (code -> code stmt .)


state 6

    (5) stmt -> CMD args . NEWLINE
    (6) stmt -> CMD args .
    (7) args -> args . COMMA arg

    NEWLINE         shift and go to state 15
    CMD             reduce using rule 6 (stmt -> CMD args .)
    $end            reduce using rule 6 (stmt -> CMD args .)
    COMMA           shift and go to state 16


state 7

    (8) args -> arg .

    NEWLINE         reduce using rule 8 (args -> arg .)
    COMMA           reduce using rule 8 (args -> arg .)
    CMD             reduce using rule 8 (args -> arg .)
    $end            reduce using rule 8 (args -> arg .)


state 8

    (9) arg -> literal . LPAR literal RPAR
    (10) arg -> literal .

    LPAR            shift and go to state 17
    NEWLINE         reduce using rule 10 (arg -> literal .)
    COMMA           reduce using rule 10 (arg -> literal .)
    CMD             reduce using rule 10 (arg -> literal .)
    $end            reduce using rule 10 (arg -> literal .)


state 9

    (11) literal -> HEX_A .

    LPAR            reduce using rule 11 (literal -> HEX_A .)
    NEWLINE         reduce using rule 11 (literal -> HEX_A .)
    COMMA           reduce using rule 11 (literal -> HEX_A .)
    CMD             reduce using rule 11 (literal -> HEX_A .)
    $end            reduce using rule 11 (literal -> HEX_A .)
    RPAR            reduce using rule 11 (literal -> HEX_A .)


state 10

    (12) literal -> HEX_B .

    LPAR            reduce using rule 12 (literal -> HEX_B .)
    NEWLINE         reduce using rule 12 (literal -> HEX_B .)
    COMMA           reduce using rule 12 (literal -> HEX_B .)
    CMD             reduce using rule 12 (literal -> HEX_B .)
    $end            reduce using rule 12 (literal -> HEX_B .)
    RPAR            reduce using rule 12 (literal -> HEX_B .)


state 11

    (13) literal -> DEC .

    LPAR            reduce using rule 13 (literal -> DEC .)
    NEWLINE         reduce using rule 13 (literal -> DEC .)
    COMMA           reduce using rule 13 (literal -> DEC .)
    CMD             reduce using rule 13 (literal -> DEC .)
    $end            reduce using rule 13 (literal -> DEC .)
    RPAR            reduce using rule 13 (literal -> DEC .)


state 12

    (14) literal -> BIN_A .

    LPAR            reduce using rule 14 (literal -> BIN_A .)
    NEWLINE         reduce using rule 14 (literal -> BIN_A .)
    COMMA           reduce using rule 14 (literal -> BIN_A .)
    CMD             reduce using rule 14 (literal -> BIN_A .)
    $end            reduce using rule 14 (literal -> BIN_A .)
    RPAR            reduce using rule 14 (literal -> BIN_A .)


state 13

    (15) literal -> BIN_B .

    LPAR            reduce using rule 15 (literal -> BIN_B .)
    NEWLINE         reduce using rule 15 (literal -> BIN_B .)
    COMMA           reduce using rule 15 (literal -> BIN_B .)
    CMD             reduce using rule 15 (literal -> BIN_B .)
    $end            reduce using rule 15 (literal -> BIN_B .)
    RPAR            reduce using rule 15 (literal -> BIN_B .)


state 14

    (16) literal -> REG .

    LPAR            reduce using rule 16 (literal -> REG .)
    NEWLINE         reduce using rule 16 (literal -> REG .)
    COMMA           reduce using rule 16 (literal -> REG .)
    CMD             reduce using rule 16 (literal -> REG .)
    $end            reduce using rule 16 (literal -> REG .)
    RPAR            reduce using rule 16 (literal -> REG .)


state 15

    (5) stmt -> CMD args NEWLINE .

    CMD             reduce using rule 5 (stmt -> CMD args NEWLINE .)
    $end            reduce using rule 5 (stmt -> CMD args NEWLINE .)


state 16

    (7) args -> args COMMA . arg
    (9) arg -> . literal LPAR literal RPAR
    (10) arg -> . literal
    (11) literal -> . HEX_A
    (12) literal -> . HEX_B
    (13) literal -> . DEC
    (14) literal -> . BIN_A
    (15) literal -> . BIN_B
    (16) literal -> . REG

    HEX_A           shift and go to state 9
    HEX_B           shift and go to state 10
    DEC             shift and go to state 11
    BIN_A           shift and go to state 12
    BIN_B           shift and go to state 13
    REG             shift and go to state 14

    arg                            shift and go to state 18
    literal                        shift and go to state 8

state 17

    (9) arg -> literal LPAR . literal RPAR
    (11) literal -> . HEX_A
    (12) literal -> . HEX_B
    (13) literal -> . DEC
    (14) literal -> . BIN_A
    (15) literal -> . BIN_B
    (16) literal -> . REG

    HEX_A           shift and go to state 9
    HEX_B           shift and go to state 10
    DEC             shift and go to state 11
    BIN_A           shift and go to state 12
    BIN_B           shift and go to state 13
    REG             shift and go to state 14

    literal                        shift and go to state 19

state 18

    (7) args -> args COMMA arg .

    NEWLINE         reduce using rule 7 (args -> args COMMA arg .)
    COMMA           reduce using rule 7 (args -> args COMMA arg .)
    CMD             reduce using rule 7 (args -> args COMMA arg .)
    $end            reduce using rule 7 (args -> args COMMA arg .)


state 19

    (9) arg -> literal LPAR literal . RPAR

    RPAR            shift and go to state 20


state 20

    (9) arg -> literal LPAR literal RPAR .

    NEWLINE         reduce using rule 9 (arg -> literal LPAR literal RPAR .)
    COMMA           reduce using rule 9 (arg -> literal LPAR literal RPAR .)
    CMD             reduce using rule 9 (arg -> literal LPAR literal RPAR .)
    $end            reduce using rule 9 (arg -> literal LPAR literal RPAR .)

